/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package uiComponents.DentalHospital.Doctor;

import Business.EcoSystem;
import Business.WorkQueue.DoctorAvailableSlotWR;
import Business.WorkQueue.WorkQueue;
import Business.WorkQueue.WorkRequest;
import Bussiness.model.PHC.UserAccount;
import Utils.Config;
import Utils.EmailUtility;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author richajain
 */
public class DentistWorkAreaJPanel extends javax.swing.JPanel {

    private EcoSystem ecosystem;
    private javax.swing.JSplitPane jSplitPane1;
    private UserAccount account;
    /**
     * Creates new form DentistWorkAreaJPanel
     */
    public DentistWorkAreaJPanel(EcoSystem ecosystem, UserAccount account) {
        initComponents();
        
        this.ecosystem = EcoSystem.getInstance();
        this.account = account;
        
        populatePendingAppointmentsTable();
        populateCompletedAppointmentsTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        pendingAppointmentsTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        completedAppointmensTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        viewAppointment = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        pendingAppointmentsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Id", "Patient's Name", "Date/Time", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(pendingAppointmentsTable);

        completedAppointmensTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Id", "Patient's Name", "Date/Time", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(completedAppointmensTable);

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Pending Appointments");

        jButton1.setBackground(new java.awt.Color(51, 153, 255));
        jButton1.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jButton1.setText("Reject Appointment");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rejectAppointmentActionPerformed(evt);
            }
        });

        viewAppointment.setBackground(new java.awt.Color(51, 153, 255));
        viewAppointment.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        viewAppointment.setText("Confirm Appointment");
        viewAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewAppointmentActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Confirmed Appointments");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 659, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(159, 159, 159)
                        .addComponent(viewAppointment)
                        .addGap(45, 45, 45)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 659, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton1, viewAppointment});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void rejectAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rejectAppointmentActionPerformed
        // TODO add your handling code here:
        
        int selectedRow = pendingAppointmentsTable.getSelectedRow();
        
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please Select a Row");
            return;
        }
        //String name = pendingAppointmentsTable.getValueAt(selectedRow, 0).toString();
        if (pendingAppointmentsTable.getValueAt(selectedRow, 3).equals("Completed")) {
            JOptionPane.showMessageDialog(null, "This request is already completed");
            return ;
          
        }
        if (pendingAppointmentsTable.getValueAt(selectedRow, 3).equals("Requested")) {
           int id = (int)pendingAppointmentsTable.getValueAt(selectedRow, 0) - 1;

           WorkRequest req = ecosystem.getWorkQueue().getWorkRequestList().get(id);

           req.setStatus("Rejected");
           
           if(req.getEmail() != null && !req.getEmail().isEmpty()){
            String subject = "Appointment Status";
            String body = "Hey " + ",\n Your appointment is canceled due to some reasons" ;
            EmailUtility.sendEmail(subject, Config.emailId, Config.password, body, new String[]{req.getEmail()});
            }
        }
        
        populateCompletedAppointmentsTable();
        populatePendingAppointmentsTable();
    }//GEN-LAST:event_rejectAppointmentActionPerformed

    private void viewAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewAppointmentActionPerformed
        // TODO add your handling code here:
        int selectedRow = pendingAppointmentsTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please Select a Row");
            return;
        }
        String name = pendingAppointmentsTable.getValueAt(selectedRow, 0).toString();
        if (pendingAppointmentsTable.getValueAt(selectedRow, 3).equals("Confirmed")) {
            JOptionPane.showMessageDialog(null, "This request is already confirmed");
            return ;
          
        }
        if (pendingAppointmentsTable.getValueAt(selectedRow, 3).equals( "Requested")) {
           int index = (int) pendingAppointmentsTable.getValueAt(selectedRow, 0) - 1;
           WorkRequest req = ecosystem.getWorkQueue().getWorkRequestList().get(index);
           req.setStatus("Confirmed");
           
           if(req.getEmail() != null && !req.getEmail().isEmpty()){
            String subject = "Appointment Status";
            String body = "Hey " + ",\n Your appointment is confirmed" ;
            EmailUtility.sendEmail(subject, Config.emailId, Config.password, body, new String[]{req.getEmail()});
           }
        }
        
        populateCompletedAppointmentsTable();
        populatePendingAppointmentsTable();
        
    }//GEN-LAST:event_viewAppointmentActionPerformed

    private void populatePendingAppointmentsTable() {
        
        DefaultTableModel dtm = (DefaultTableModel) pendingAppointmentsTable.getModel();
	
        dtm.setRowCount(0);
        int id = 1;
        for (WorkRequest wr :  ecosystem.getWorkQueue().getWorkRequestList()) {
            Object row[] = new Object[4];
            if(wr instanceof DoctorAvailableSlotWR && ((DoctorAvailableSlotWR) wr).getDoctor().equals(account.getUsername()) &&
                    ("Pending".equals(wr.getStatus()) || "Requested".equals(wr.getStatus()))
               ){
                row[0] = id;
                row[1] = ((DoctorAvailableSlotWR) wr).getPatient();
                row[2] = ((DoctorAvailableSlotWR) wr).getTimings();
                row[3] = wr.getStatus();
                dtm.addRow(row);
            }
            id++;
        }
    }
    
    private void populateCompletedAppointmentsTable() {
        
        DefaultTableModel dtm = (DefaultTableModel) completedAppointmensTable.getModel();
	
        dtm.setRowCount(0);
        int id = 1;
        for (WorkRequest wr :  ecosystem.getWorkQueue().getWorkRequestList()) {
            Object row[] = new Object[4];
            if(wr instanceof DoctorAvailableSlotWR && ((DoctorAvailableSlotWR) wr).getDoctor().equals(account.getUsername()) &&
                    ("Confirmed".equals(wr.getStatus()))){
                row[0] = id;
                row[1] = ((DoctorAvailableSlotWR) wr).getPatient();
                row[2] = ((DoctorAvailableSlotWR) wr).getTimings();
                row[3] = wr.getStatus();
                dtm.addRow(row);
            }
            
            id++;
        }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable completedAppointmensTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable pendingAppointmentsTable;
    private javax.swing.JButton viewAppointment;
    // End of variables declaration//GEN-END:variables
}
