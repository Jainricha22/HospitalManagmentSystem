/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package uiComponents.DentalPatientRole;

import Business.EcoSystem;
import Business.Network;
import Business.Organization;
import Business.Pharmacy.Model.Medicine;
import Business.Pharmacy.Model.MedicinesInventory;
import Business.Pharmacy.Organizations.PharmacyOrganization;
import Business.WorkQueue.DoctorAvailableSlotWR;
import Business.WorkQueue.MedicineWorkRequest;
import Business.WorkQueue.WorkRequest;
import Bussiness.model.PHC.UserAccount;
import Enterprise.Enterprise;
import Utils.Config;
import static Utils.Config.emailId;
import Utils.EmailUtility;
import java.util.Date;
import javax.swing.InputVerifier;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import validations.VerifyEmail;

/**
 *
 * @author foram
 */
public class DentalPatientJPanel extends javax.swing.JPanel {

    /**
     * Creates new form DentalPatientJPanel
     */
    
    private EcoSystem ecosystem;
    private javax.swing.JSplitPane userProcessContainer;
    private UserAccount userAccount;
    private Enterprise enterprise;
    private MedicinesInventory medInv;
    private Organization org;
    private PharmacyOrganization pharmorg;
    private Network network;
    private javax.swing.JSplitPane jSplitPane1;
    
    public DentalPatientJPanel(EcoSystem ecosystem,javax.swing.JSplitPane userProcessContainer, UserAccount userAccount, PharmacyOrganization organization, Enterprise enterprise, Network network) {
        initComponents();
        
        this.ecosystem = EcoSystem.getInstance();
        this.jSplitPane1 = userProcessContainer;
        this.userAccount = userAccount;
        this.enterprise = enterprise;
        this.pharmorg = organization;
        this.network = network;
        
        populateTable();
        populateComboBox();
        
        populateAvailableSlotsTable();
        populateBookedAppointmentTable();
        
        addVerifiers();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        appointmentPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        availableSlotsJTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        bookedSlotsJTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jTextField3 = new javax.swing.JTextField();
        orderRequestPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        requestedItemsTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        appointmentPanel.setBackground(new java.awt.Color(255, 255, 255));

        availableSlotsJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "#Id", "Doctor's Name", "Date/Time", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(availableSlotsJTable);

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Available Slots");

        jButton1.setBackground(new java.awt.Color(51, 153, 255));
        jButton1.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jButton1.setText("Book this Slot");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1bookSlotActionPerformed(evt);
            }
        });

        bookedSlotsJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "#Id", "Doctor's Name", "Date/Time", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(bookedSlotsJTable);

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Booked Slots");

        jButton3.setBackground(new java.awt.Color(51, 153, 255));
        jButton3.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jButton3.setText("Notify Me");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notifyBookSlotActionPerformed(evt);
            }
        });

        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout appointmentPanelLayout = new javax.swing.GroupLayout(appointmentPanel);
        appointmentPanel.setLayout(appointmentPanelLayout);
        appointmentPanelLayout.setHorizontalGroup(
            appointmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(appointmentPanelLayout.createSequentialGroup()
                .addGap(211, 211, 211)
                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(appointmentPanelLayout.createSequentialGroup()
                .addGroup(appointmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(appointmentPanelLayout.createSequentialGroup()
                        .addGap(331, 331, 331)
                        .addComponent(jButton1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, appointmentPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(appointmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 759, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        appointmentPanelLayout.setVerticalGroup(
            appointmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(appointmentPanelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(appointmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(61, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Appointment Details", appointmentPanel);

        requestedItemsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Medicine Name", "Quantity", "Date Placed", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(requestedItemsTable);

        jLabel3.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel3.setText("Medicine Name");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel4.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel4.setText("Quantity");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Requested Items");

        jButton2.setBackground(new java.awt.Color(51, 153, 255));
        jButton2.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jButton2.setText("Create Request");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2createRequestActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout orderRequestPanelLayout = new javax.swing.GroupLayout(orderRequestPanel);
        orderRequestPanel.setLayout(orderRequestPanelLayout);
        orderRequestPanelLayout.setHorizontalGroup(
            orderRequestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(orderRequestPanelLayout.createSequentialGroup()
                .addGroup(orderRequestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(orderRequestPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 739, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(orderRequestPanelLayout.createSequentialGroup()
                        .addGap(305, 305, 305)
                        .addComponent(jButton2))
                    .addGroup(orderRequestPanelLayout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(orderRequestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(orderRequestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(orderRequestPanelLayout.createSequentialGroup()
                        .addGap(290, 290, 290)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        orderRequestPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel3, jLabel4});

        orderRequestPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jComboBox1, jTextField1});

        orderRequestPanelLayout.setVerticalGroup(
            orderRequestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(orderRequestPanelLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(orderRequestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(orderRequestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(205, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Order Request", orderRequestPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2createRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2createRequestActionPerformed
        // TODO add your handling code here:
        try{
            MedicineWorkRequest med = new MedicineWorkRequest();
            med.setMedicationName((String) jComboBox1.getSelectedItem());
            med.setQuantity(Integer.parseInt(jTextField1.getText()));
            med.setRequestDate(new Date());
            med.setSender(userAccount);
            med.setPatientName(userAccount.getUsername());
            med.setStatus("Pending");

            ecosystem.getWorkQueue().getWorkRequestList().add(med);
//            WorkQueue.getInstance().add(med);
            //pharmorg.getWorkQueue().getWorkRequestList().add(med);

            populateTable();
        }catch(Exception e){
            System.out.println(e);
            JOptionPane.showMessageDialog(null, "Details entered are not valid. Kindly check again.", "Error", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_jButton2createRequestActionPerformed

    private void jButton1bookSlotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1bookSlotActionPerformed
        // TODO add your handling code here:

        int selectedRow = availableSlotsJTable.getSelectedRow();
        
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please Select a Row");
            return;
        }
        
        int id = (int)availableSlotsJTable.getValueAt(selectedRow, 0);
        DoctorAvailableSlotWR req = (DoctorAvailableSlotWR) ecosystem.getWorkQueue().getWorkRequestList().get(id-1);
        req.setPatient(userAccount.getUsername());
        req.setStatus("Requested");

        populateBookedAppointmentTable();
        populateAvailableSlotsTable();
    }//GEN-LAST:event_jButton1bookSlotActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void notifyBookSlotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notifyBookSlotActionPerformed
        // TODO add your handling code here:
        
        int selectedRow = bookedSlotsJTable.getSelectedRow();
        String subject = "Appointment Status";
        String body = "Hey, \nYou just got notified from Team ROCKET!";
        
        String emailAdd = jTextField3.getText();
        
        if(emailAdd.isEmpty()){
            JOptionPane.showMessageDialog(null, "Please enter valid email."
                , "Error", JOptionPane.ERROR_MESSAGE);
        }
        if (selectedRow < 0) {
        JOptionPane.showMessageDialog(null, "Please Select a Row");
        return;
        }
        else {
            int id = (int)bookedSlotsJTable.getValueAt(selectedRow, 0);
            DoctorAvailableSlotWR req = (DoctorAvailableSlotWR) ecosystem.getWorkQueue().getWorkRequestList().get(id-1);
            req.setEmail(jTextField3.getText());
            JOptionPane.showMessageDialog(null, "Email sent");
            EmailUtility.sendEmail(subject, Config.emailId, Config.password, body, new String[]{emailAdd});
        }
      
    }//GEN-LAST:event_notifyBookSlotActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

       private void populateAvailableSlotsTable() {
        DefaultTableModel dtm = (DefaultTableModel) availableSlotsJTable.getModel();
	
        dtm.setRowCount(0);
        int id = 1;
        for (WorkRequest wr :  ecosystem.getWorkQueue().getWorkRequestList()) {
            Object row[] = new Object[4];
            if(wr instanceof DoctorAvailableSlotWR && "Available".equals(wr.getStatus())){
                row[0] = id;
                row[1] = ((DoctorAvailableSlotWR) wr);
                row[2] = ((DoctorAvailableSlotWR) wr).getTimings();
                row[3] = wr.getStatus();
                dtm.addRow(row);
            }
            id++;
        }
    }
    
    private void populateBookedAppointmentTable() {
        
        DefaultTableModel dtm = (DefaultTableModel) bookedSlotsJTable.getModel();
	
        dtm.setRowCount(0);
        // Add user check
        int id = 1;
        for (WorkRequest wr :  ecosystem.getWorkQueue().getWorkRequestList()) {
            Object row[] = new Object[4];
            if(wr instanceof DoctorAvailableSlotWR && "Requested".equals(wr.getStatus())){
                row[0] = id;
                row[1] = ((DoctorAvailableSlotWR) wr).getDoctor();
                row[2] = ((DoctorAvailableSlotWR) wr).getTimings();
                row[3] = wr.getStatus();
                dtm.addRow(row);
            }
            id++;
        }
    }
    
    
    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel)requestedItemsTable.getModel();
        
        model.setRowCount(0);

        for (WorkRequest request : ecosystem.getWorkQueue().getWorkRequestList()){
            if(request instanceof MedicineWorkRequest){
                if(((MedicineWorkRequest) request).getPatientName().equals(userAccount.getUsername())){
                    Object[] row = new Object[4];
                    row[0] = ((MedicineWorkRequest) request);
                    row[1] = ((MedicineWorkRequest) request).getQuantity();
                    row[2] = ((MedicineWorkRequest) request).getRequestDate();
                    row[3] =  ((MedicineWorkRequest) request).getStatus();
                    model.addRow(row);
                }
            }
        }
    }
    
    private void populateComboBox() {
        jComboBox1.removeAllItems();

        for (Medicine name : pharmorg.getMedList()) {
                jComboBox1.addItem(name.getMedicineName());
            }
    }
    
    private void addVerifiers() {
        
        InputVerifier emailVerifier = new VerifyEmail();
        jTextField3.setInputVerifier(emailVerifier);
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel appointmentPanel;
    private javax.swing.JTable availableSlotsJTable;
    private javax.swing.JTable bookedSlotsJTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JPanel orderRequestPanel;
    private javax.swing.JTable requestedItemsTable;
    // End of variables declaration//GEN-END:variables
}
